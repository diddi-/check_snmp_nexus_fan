#!/usr/bin/env perl

#####
# check_snmp_nexus_fru:
# Check script for nagios
#
# Author: Diddi Oscarsson <diddi@diddi.se>
#####

use warnings;
use strict;

use Nagios::Plugin;
use Net::SNMP qw(:snmp);
use Getopt::Long;
use POSIX;
use Data::Dumper;
my $np = Nagios::Plugin->new(
  usage => "Usage: %s -H <host> -C <community> -w <warning value> -c <critical value>");

$np->add_arg(
  spec => "host|H=s",
  help => "-H, --host <hostname>. Set the host/ip to send snmp queries to.",
  required => 1,
);

$np->add_arg(
  spec => "community|C=s",
  help => "-C, --community <community>. Set the SNMP community to use for the query.",
  required => 1,
);


$np->getopts;
my $sev = 0;
my $session = undef;
my $error = undef;
my $warning_value = 3;
my $critical_value = 4;
my %oid_Sensors;
my $oid_FanTrayStatus = '1.3.6.1.4.1.9.9.117.1.1.2.1.2';
my $entPhysicalDescr = '.1.3.6.1.2.1.47.1.1.1.1.2';
my $fru;
my $result;


$result = bulk($np->opts->host, $np->opts->community, $oid_FanTrayStatus);
for my $oid (oid_lex_sort(keys %{$result})) {
  my $status = $result->{$oid};
  $fru->{$1}->{'status'} = $status if $oid =~ /\.([0-9]+)$/;
}

$result = bulk($np->opts->host, $np->opts->community, $entPhysicalDescr);
for my $oid (oid_lex_sort(keys %{$result})) {
  my $descr = $result->{$oid};
  my $id = $1 if $oid =~ /\.([0-9]+)$/;
  $fru->{$1}->{'description'} = $descr if $fru->{$id};
}

foreach my $value (values(%{$fru})) {
  if ( $value->{'status'} >= $critical_value) {
    $sev = 3;
  }elsif($sev < 3 and ($value->{'status'} >= $warning_value) ) {
    $sev = 2;
  }else{
    $sev = -1 if $sev < 2; #FIXME: What need to be fixed?? /Diddi
  }
}

if($sev == 3) {
  printf("CRITICAL: ");
  foreach my $id (keys(%{$fru})) {
    printf("%s: %s, ", $fru->{$id}{'description'}, $fru->{$id}->{'status'});
  }
  printf("\n");
  exit(CRITICAL);
}

if($sev == 2) {
        printf("WARNING: ");
        foreach my $id (keys(%{$fru})) {
                printf("%s: %s, ", $fru->{$id}->{'description'}, $fru->{$id}->{'status'});
        }
        printf("\n");
        exit(WARNING);
}

if($sev == 0) {
        printf("OK: ");
        foreach my $id (keys(%{$fru})) {
                printf("%s: %s, ", $fru->{$id}->{'description'}, $fru->{$id}->{'status'});
        }
        printf("\n");
        exit(OK);
}

sub bulk {
  my $host = shift;
  my $community = shift;
  my $base_oid = shift;
  my $result;

  my ($session, $error) = Net::SNMP->session(
    -hostname => $host,
    -community => $community,
    -nonblocking => 1,
    -timeout => 5,
    -port => 161,
    -version => 'snmpv2c',
  );

  if(not defined($session)) {
    printf("ERROR: %s.\n", $error);
    exit(UNKNOWN);
  }

  my %table; # Hash to store the results
  $result = $session->get_bulk_request(
     -varbindlist    => [ $base_oid ],
     -callback       => [ \&table_callback, \%table, $base_oid],
     -maxrepetitions => 10,
  );

  if (!defined $result) {
     printf "ERROR: %s\n", $session->error();
     $session->close();
     exit (UNKNOWN);
  }

  # Now initiate the SNMP message exchange.
  snmp_dispatcher();
  $session->close();
  $session = undef;

#  # Look for a matching disk
#  for my $oid (oid_lex_sort(keys %table)) {
#    my $value = $table{$oid};
#    $bulk_table{$oid} = $status if $oid =~ /\.([0-9]+)$/;
#  }

  return \%table;
}

sub table_callback
{
   my ($session, $table, $base) = @_;

   my $list = $session->var_bind_list();

   if (!defined $list) {
      printf "ERROR: %s\n", $session->error();
      return;
   }

   # Loop through each of the OIDs in the response and assign
   # the key/value pairs to the reference that was passed with
   # the callback. Make sure that we are still in the table
   # before assigning the key/values.

   my @names = $session->var_bind_names();
   my $next  = undef;

   while (@names) {
      $next = shift @names;
      if (!oid_base_match($base, $next)) {
        return; # Table is done.
      }
      $table->{$next} = $list->{$next};
   }

   # Table is not done, send another request, starting at the last
   # OBJECT IDENTIFIER in the response. No need to include the
   # calback argument, the same callback that was specified for the
   # original request will be used.

   my $result = $session->get_bulk_request(
      -varbindlist    => [ $next ],
      -maxrepetitions => 10,
   );

   if (!defined $result) {
      printf "ERROR: %s.\n", $session->error();
   }

   return;
}

